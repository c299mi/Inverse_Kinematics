# README

## 概要

このスクリプトは、3リンクのロボットアームの逆運動学を実行します。目的は、ロボットアームのエンドエフェクタを2D平面上の指定された目標位置に移動することです。スクリプトはヤコビアン行列とその疑似逆行列を使用して、現在のエンドエフェクタの位置と目標位置の誤差を最小化するように関節角度を反復的に調整します。

## 依存関係

- numpy
- matplotlib

これらのパッケージをスクリプト実行前にインストールしてください。以下のコマンドを使用してインストールできます。

'''
pip install numpy matplotlib
'''


## コードの説明

### 関数

1. **Plot(X, Y)**
   - ロボットアームの現在位置と目標位置を2D平面上にプロットします。
   - `X`, `Y`: ロボットアームの各関節のx座標とy座標のリスト。

2. **Jacobian(L, TH)**
   - ロボットアームのヤコビアン行列を計算します。
   - `L`: リンクの長さのリスト。
   - `TH`: 関節角度のリスト。

3. **FK(L, TH, plot=False)**
   - ロボットアームの順運動学を計算し、エンドエフェクタの位置を返します。
   - `L`: リンクの長さのリスト。
   - `TH`: 関節角度のリスト。
   - `plot`: 中間関節の位置をプロット用に返すかどうかを示すブール値。

4. **limit_angles(TH, TH_min, TH_max)**
   - 関節角度が指定された制限範囲内にあることを保証します。
   - `TH`: 現在の関節角度のリスト。
   - `TH_min`, `TH_max`: 最小および最大関節角度のリスト。

### メインスクリプト

1. **初期パラメータ**
   - リンクの長さとエンドエフェクタの目標位置を定義します。
   - 関節角度をゼロに初期化します。

2. **逆運動学ループ**
   - エンドエフェクタの位置と目標位置の誤差を最小化するために、関節角度を反復的に調整します。
   - ヤコビアン行列とその疑似逆行列を使用して、関節角度の変化を計算します。
   - 関節角度を更新し、指定された制限範囲内に保ちます。
   - 誤差が十分に小さくなるか、最大反復回数に達したときにループを終了します。

3. **出力**
   - ロボットアームの最終位置と目標位置をプロットします。
   - 目標位置、エンドエフェクタの最終位置、誤差、および反復回数を表示します。

### スクリプトの実行

スクリプトを実行するには、Python環境で以下のコマンドを実行します。スクリプトはロボットアームの最終位置を表示し、コンソールに関連情報を表示します。


## 実行例

スクリプトはベース、エンドエフェクタ、および目標位置を示すプロットを生成します。また、目標位置、エンドエフェクタの最終位置、誤差、および目標に達するために必要な反復回数に関する情報を表示します。

'''
Target : x = 2.2 , y = -0.9
End-effector: x = 2.2 , y = -0.9
Error(< 1e-5): 0.0000
Loops: 10
'''


スクリプトの最後には、関節角度（ラジアン単位）も表示されます。

## 注意

- リンクの長さや目標位置は、特定のアプリケーションに応じて調整してください。
- 初期関節角度と目標位置が、リンクの長さおよび関節の制限範囲内で実現可能であることを確認してください。

## ライセンス

このプロジェクトはMITライセンスの下でライセンスされています。

## 謝辞

このスクリプトは、逆運動学およびヤコビアン行列を使用してロボットアームを制御する方法を示すために作成されました。

このスクリプトを自由に変更し、ニーズに合わせて拡張してください。
